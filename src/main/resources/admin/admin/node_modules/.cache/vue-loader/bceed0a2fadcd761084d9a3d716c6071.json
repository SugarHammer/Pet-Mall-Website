{"remainingRequest":"D:\\0_a\\chongwushangchengwangzhan\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\0_a\\chongwushangchengwangzhan\\src\\main\\resources\\admin\\admin\\src\\views\\modules\\shangpin\\list.vue?vue&type=template&id=60d21a8b&scoped=true&","dependencies":[{"path":"D:\\0_a\\chongwushangchengwangzhan\\src\\main\\resources\\admin\\admin\\src\\views\\modules\\shangpin\\list.vue","mtime":1645520710350},{"path":"D:\\0_a\\chongwushangchengwangzhan\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0_a\\chongwushangchengwangzhan\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\0_a\\chongwushangchengwangzhan\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\0_a\\chongwushangchengwangzhan\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}